/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.ds.lab.sockets.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;

public class EchoServer {

    public static void main(String[] args) {
        int port = Integer.parseInt(args[0]);
        try {
            listen(port);
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public static void listen(int port) throws IOException {
        var server = new ServerSocket();

        // reserve the port
        server.bind(new InetSocketAddress(port));
        System.out.printf("Server is listening on port %d...\n", port);

        // start waiting for the standard input to be closed, then terminate the server

        while (!server.isClosed()) {
            // accept incoming connections
            // serve them
            try {
                // Accetta connessioni in ingresso
                Socket client = server.accept();
                System.out.printf("Accepted connection from %s\n", client.getRemoteSocketAddress());

                // Gestisce la connessione del client
                handleClient(client);

            } catch (IOException e) {
                if (server.isClosed()) {
                    System.out.println("Server has been closed.");
                } else {
                    e.printStackTrace();
                }
            }
        }
    }

    private static void handleClient(Socket client) {
        try (var in = client.getInputStream(); // Stream di input del socket, usato per ricevere dati dal client
             var out = client.getOutputStream()) { // Stream di output del socket, usato per inviare dati al client
            int byteRead;
            while ((byteRead = in.read()) != -1) {
                System.out.write(byteRead); // Stampa i byte ricevuti nel terminale (stdout)
                out.write(byteRead); // Scrive i byte letti sull'OutputStream del socket 
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                client.close();
            } catch (IOException ignored) {
            }
        }
    }

}
